// Generated by L3P v1.4 BETA 20131202 (Win32)  (C) 1998-2013 Lars C. Hassing SP.lars@AM.hassings.dk
// L3P website:  http://www.hassings.dk/l3/l3p.html
// LDraw.org:    http://www.ldraw.org
// Date:         Mon Jul 01 06:34:02 2019
// Input file:   slope_test.ldr
// Title:        Untitled
// Author:       MLCad
// ModelDir:     .
// WorkDir:      D:\Working\LDraw\test\slope_test
// LDRAWDIR:     C:\Users\Public\Documents\LDraw (LDRAWDIR environment variable)
// SearchDirs:   (Default)
// SearchDir1:   .\ (0x10)
// SearchDir2:   C:\Users\Public\Documents\LDraw\P\ (0x9)
// SearchDir3:   C:\Users\Public\Documents\LDraw\PARTS\ (0x4)
// SearchDir4:   C:\Users\Public\Documents\LDraw\MODELS\ (0x0)
// LGEODIR:      C:\Users\Public\Documents\LDraw\LGEO (LGEODIR environment variable)
// ldconfig.ldr: C:\Users\Public\Documents\LDraw\ldconfig.ldr
// Commandline:  "E:\Programs Windows\LDraw\l3p14beta\L3P20131202.EXE" slope_test.ldr slope_test_l3p_lgeo_y.pov -o -cg30,45,-50 -ca45 -lgeo -ar -nolgcf

#if (version < 3.1)
	#error "This POV code requires at least version 3.1\n"
#end

//// Defines

#declare L3Version = 1.4;

#declare L3Quality = 2;  // Quality level, 0=BBox, 1=no refr, 2=normal, 3=studlogo, 4=stud2logo

#declare L3SW = 0.5;  // Width of seam between two bricks

#declare L3Studs = 1;  // 1=on 0=off

#declare L3Bumps = 0;  // 1=on 0=off


#declare L3Ambient = 0.4;
#declare L3Diffuse = 0.4;
#declare L3Ior     = 1.25;
#declare L3NormalBumps = normal { bumps 0.01 scale 20 }
#declare L3NormalSlope = normal { bumps 0.3 scale 0.5 }


#declare L3SWT = (L3SW ? L3SW : 0.001);  // At least a small seam when transparent

#declare L3Logo = union {
	sphere {<-59,0,-96>,6}
	cylinder {<-59,0,-96>,<59,0,-122>,6 open}
	sphere {<59,0,-122>,6}
	cylinder {<59,0,-122>,<59,0,-84>,6 open}
	sphere {<59,0,-84>,6}

	sphere {<-59,0,-36>,6}
	cylinder {<-59,0,-36>,<-59,0,1>,6 open}
	sphere {<-59,0,1>,6}
	cylinder {<0,0,-49>,<0,0,-25>,6 open}
	sphere {<0,0,-25>,6}
	sphere {<59,0,-62>,6}
	cylinder {<59,0,-62>,<59,0,-24>,6 open}
	sphere {<59,0,-24>,6}
	cylinder {<-59,0,-36>,<59,0,-62>,6 open}

	sphere {<-35.95,0,57>,6}
	torus {18.45,6 clipped_by{plane{<40,0,-9>,0}} translate<-40,0,39>}
	cylinder {<-44.05,0,21>,<35.95,0,3>,6 open}
	torus {18.45,6 clipped_by{plane{<-40,0,9>,0}} translate<40,0,21>}
	cylinder {<44.05,0,39>,<0,0,49>,6 open}
	sphere {<0,0,49>,6}
	cylinder {<0,0,49>,<0,0,34>,6 open}
	sphere {<0,0,34>,6}

	torus {18.45,6 clipped_by{plane{<40,0,-9>,0}} translate<-40,0,99>}
	cylinder {<-44.05,0,81>,<35.95,0,63>,6 open}
	torus {18.45,6 clipped_by{plane{<-40,0,9>,0}} translate<40,0,81>}
	cylinder {<44.05,0,99>,<-35.95,0,117>,6 open}

	scale 4.5/128
}


#declare lg_quality = L3Quality;
#declare lg_studs = L3Studs;

#include "lg_defs.inc"

#declare L3LDrawToLgeo = transform { matrix <0,-LG_BRICK_WIDTH/20,0, 0,0,-LG_BRICK_HEIGHT/24, -LG_BRICK_WIDTH/20,0,0, 0,0,4*LG_BRICK_HEIGHT/24> }
#declare L3LgeoToLDraw = transform { matrix <0,0,-20/LG_BRICK_WIDTH, -20/LG_BRICK_WIDTH,0,0, 0,-24/LG_BRICK_HEIGHT,0, 0,0,0> }




//// Finishes
#ifndef (L3FinishOpaque)
#declare L3FinishOpaque = finish {
	ambient L3Ambient
	diffuse L3Diffuse
	#if (L3Quality >= 2)
		phong 0.5
		phong_size 40
		reflection 0.08
	#end
}
#end

#ifndef (L3FinishChrome)
#declare L3FinishChrome = finish {
	ambient 0.25
	diffuse 0.6
	#if (L3Quality >= 2)
		brilliance 5
		metallic
		specular 0.80
		roughness 1/100
		reflection 0.65
	#end
}
#end

#ifndef (L3FinishPearlescent)
//Not supported yet, using Opaque
#declare L3FinishPearlescent = finish { L3FinishOpaque }
#end

#ifndef (L3FinishRubber)
#declare L3FinishRubber = finish {
	ambient L3Ambient
	diffuse L3Diffuse
	#if (L3Quality >= 2)
		phong 0.1
		phong_size 10
		reflection 0
	#end
}
#end

#ifndef (L3FinishMatte_metallic)
//Not supported yet, using Opaque
#declare L3FinishMatte_metallic = finish { L3FinishOpaque }
#end

#ifndef (L3FinishMetal)
//Not supported yet, using Opaque
#declare L3FinishMetal = finish { L3FinishOpaque }
#end

#ifndef (L3FinishTransparent)
#declare L3FinishTransparent = finish {
	ambient L3Ambient
	diffuse L3Diffuse
	#if (L3Quality >= 2)
		phong 0.5
		phong_size 40
		reflection 0.2
	#end
}
#end



//// Macros
#ifndef (L3TextureOpaqueRGB)
#macro L3TextureOpaqueRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishOpaque }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureChromeRGB)
#macro L3TextureChromeRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishChrome }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TexturePearlescentRGB)
#macro L3TexturePearlescentRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishPearlescent }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureRubberRGB)
#macro L3TextureRubberRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishRubber }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureMatte_metallicRGB)
#macro L3TextureMatte_metallicRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishMatte_metallic }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureMetalRGB)
#macro L3TextureMetalRGB(r,g,b)
texture {
	pigment { rgb <r/255,g/255,b/255> }
	finish { L3FinishMetal }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureTransparentRGBA)
#macro L3TextureTransparentRGBA(r,g,b,a)
// Alpha -> Filter: 255 -> 1.00, 128 -> 0.85, 0 -> 0
#local f = (a >= 128 ? 0.85 + (a-128) * 0.15 / (255-128) : a * 0.85 / 255);
texture {
	pigment { rgb <r/255,g/255,b/255> #if (L3Quality > 1) filter f #end }
	finish { L3FinishTransparent }
	#if (L3Bumps & (L3Quality > 1)) normal { L3NormalBumps } #end
}
#end
#end

#ifndef (L3TextureSlope)
#macro L3TextureSlope(tex)
texture {
	tex
	#if (L3Quality > 1) normal { L3NormalSlope } #end
}
#end
#end

#ifndef (L3Material)
#macro L3Material(tex)
material {
	texture { tex }
}
#end
#end

#ifndef (L3MaterialT)
#macro L3MaterialT(tex)
material {
	texture { tex }
	#if (L3Quality > 1)
		interior { ior L3Ior }
	#end
}
#end
#end



//// Textures for LGEO patterned parts
#declare lg_black = L3TextureOpaqueRGB(5,19,29)
#declare lg_blue = L3TextureOpaqueRGB(0,85,191)
#declare lg_green = L3TextureOpaqueRGB(37,122,62)
#declare lg_cyan = L3TextureOpaqueRGB(0,131,143)
#declare lg_red = L3TextureOpaqueRGB(201,26,9)
#declare lg_dark_pink = L3TextureOpaqueRGB(200,112,160)
#declare lg_brown = L3TextureOpaqueRGB(88,57,39)
#declare lg_grey = L3TextureOpaqueRGB(155,161,157)
#declare lg_dark_grey = L3TextureOpaqueRGB(109,110,92)
#declare lg_light_blue = L3TextureOpaqueRGB(180,210,227)
#declare lg_bright_green = L3TextureOpaqueRGB(75,159,74)
#declare lg_turquoise = L3TextureOpaqueRGB(85,165,175)
#declare lg_salmon = L3TextureOpaqueRGB(242,112,94)
#declare lg_pink = L3TextureOpaqueRGB(252,151,172)
#declare lg_yellow = L3TextureOpaqueRGB(242,205,55)
#declare lg_white = L3TextureOpaqueRGB(255,255,255)
#declare lg_light_green = L3TextureOpaqueRGB(194,218,184)
#declare lg_light_yellow = L3TextureOpaqueRGB(251,230,150)
#declare lg_tan = L3TextureOpaqueRGB(228,205,158)
#declare lg_light_violet = L3TextureOpaqueRGB(201,202,226)
#declare lg_purple = L3TextureOpaqueRGB(129,0,123)
#declare lg_violet_blue = L3TextureOpaqueRGB(32,50,176)
#declare lg_orange = L3TextureOpaqueRGB(254,138,24)
#declare lg_magenta = L3TextureOpaqueRGB(146,57,120)
#declare lg_lime = L3TextureOpaqueRGB(187,233,11)
#declare lg_dark_tan = L3TextureOpaqueRGB(149,138,115)
#declare lg_light_purple = L3TextureOpaqueRGB(228,173,200)
#declare lg_clear_blue = L3TextureTransparentRGBA(0,32,160,128)
#declare lg_clear_green = L3TextureTransparentRGBA(35,120,65,128)
#declare lg_clear_red = L3TextureTransparentRGBA(201,26,9,128)
#declare lg_clear_violet = L3TextureTransparentRGBA(223,102,149,128)
#declare lg_clear_brown = L3TextureTransparentRGBA(99,95,82,128)
#declare lg_clear_cyan = L3TextureTransparentRGBA(85,154,183,128)
#declare lg_clear_neon_yellow = L3TextureTransparentRGBA(192,255,0,128)
#declare lg_clear_pink = L3TextureTransparentRGBA(252,151,172,128)
#declare lg_clear_yellow = L3TextureTransparentRGBA(245,205,47,128)
#declare lg_clear = L3TextureTransparentRGBA(252,252,252,128)
#declare lg_clear_neon_orange = L3TextureTransparentRGBA(240,143,28,128)
#declare lg_bright_purple = L3TextureOpaqueRGB(205,98,152)
#declare lg_reddish_brown = L3TextureOpaqueRGB(88,42,18)
#declare lg_bluish_grey = L3TextureOpaqueRGB(160,165,169)
#declare lg_dark_bluish_grey = L3TextureOpaqueRGB(108,110,104)
#declare lg_medium_blue = L3TextureOpaqueRGB(92,157,209)
#declare lg_medium_green = L3TextureOpaqueRGB(115,220,161)
#declare lg_paradisa_pink = L3TextureOpaqueRGB(254,204,207)
#declare lg_light_flesh = L3TextureOpaqueRGB(246,215,179)
#declare lg_medium_violet = L3TextureOpaqueRGB(63,54,145)
#declare lg_dark_flesh = L3TextureOpaqueRGB(124,80,58)
#declare lg_royal_blue = L3TextureOpaqueRGB(76,97,219)
#declare lg_flesh = L3TextureOpaqueRGB(208,145,104)
#declare lg_pearl_copper = L3TexturePearlescentRGB(150,74,39)
#declare lg_pearl_grey = L3TexturePearlescentRGB(156,163,168)
#declare lg_pearl_blue = L3TexturePearlescentRGB(86,119,186)
#declare lg_pearl_gold = L3TexturePearlescentRGB(220,190,97)
#declare lg_dark_blue = L3TextureOpaqueRGB(13,50,91)
#declare lg_dark_green = L3TextureOpaqueRGB(24,70,50)
#declare lg_maersk_blue = L3TextureOpaqueRGB(84,169,200)
#declare lg_dark_red = L3TextureOpaqueRGB(114,14,15)
#declare lg_sand_red = L3TextureOpaqueRGB(214,117,114)
#declare lg_earth_orange = L3TextureOpaqueRGB(250,156,28)
#declare lg_sand_purple = L3TextureOpaqueRGB(132,94,132)
#declare lg_sand_green = L3TextureOpaqueRGB(160,188,172)
#declare lg_sand_blue = L3TextureOpaqueRGB(89,113,132)
#declare lg_chrome = L3TextureChromeRGB(224,224,224)
#declare lg_gold_chrome = L3TextureChromeRGB(187,165,61)
#declare lg_light_orange = L3TextureOpaqueRGB(255,167,11)
#declare lg_dark_orange = L3TextureOpaqueRGB(169,85,0)
#declare lg_very_light_grey = L3TextureOpaqueRGB(230,227,218)


//// Color 7 Light_Grey (from ldconfig.ldr)
#ifndef (L3Texture7)
#declare L3Texture7 = L3TextureOpaqueRGB(155,161,157)
#end
#ifndef (L3Texture7_slope)
#declare L3Texture7_slope = L3TextureSlope(L3Texture7)
#end
#ifndef (L3Color7)
#declare L3Color7 = L3Material(L3Texture7)
#end
#ifndef (L3Color7_slope)
#declare L3Color7_slope = L3Material(L3Texture7_slope)
#end


//// Color 1 Blue (from ldconfig.ldr)
#ifndef (L3Texture1)
#declare L3Texture1 = L3TextureOpaqueRGB(0,85,191)
#end
#ifndef (L3Texture1_slope)
#declare L3Texture1_slope = L3TextureSlope(L3Texture1)
#end
#ifndef (L3Color1)
#declare L3Color1 = L3Material(L3Texture1)
#end
#ifndef (L3Color1_slope)
#declare L3Color1_slope = L3Material(L3Texture1_slope)
#end


//// Part 3039.dat
#ifndef (_3039_dot_dat)
#if (L3Quality > 0)
	#ifndef (lg_3039)
		#include "lg_3039.inc"
	#end
#end
#declare _3039_dot_dat = #if (L3Quality = 0) box { <-20,-4,-30>, <20,24,10> } #else object {
// Slope Brick 45  2 x  2
	lg_3039
	transform L3LgeoToLDraw
}
#end
#declare _3039_dot_dat_clear = #if (L3Quality = 0) box { <-20,-4,-30>, <20,24,10> } #else object {
// Slope Brick 45  2 x  2
	lg_3039_clear
	transform L3LgeoToLDraw
}
#end
#if (L3Quality > 0)
#declare _3039_dot_dat_slope = object {
// Slope Brick 45  2 x  2
	lg_3039_slope
	transform L3LgeoToLDraw
}
#end
#end // ifndef (_3039_dot_dat)


//// Model slope_test.ldr
#ifndef (slope__test_dot_ldr)
#declare slope__test_dot_ldr = #if (L3Quality > 0) union #else object #end {
// Untitled
// Name: slope_test.ldr
// Author: MLCad
// Unofficial Model
// ROTATION CENTER 0 0 0 1 "Custom"
// ROTATION CONFIG 0 0
	// 1 1  0 -24 10  1 0 0  0 1 0  0 0 1 3039.dat
	object {
		_3039_dot_dat
		matrix <1,0,0,0,1,0,0,0,1,0,-24,10>
		material { L3Color1 }
	}
	#if (L3Quality > 0)
		object {
			_3039_dot_dat_slope
			matrix <1,0,0,0,1,0,0,0,1,0,-24,10>
			material { L3Color1_slope }
		}
	#end
}
#end // ifndef (slope__test_dot_ldr)


//// ModelData
#declare L3ModelBBoxMin = <-20,-28,-20>;
#declare L3ModelBBoxMax = <20,0,20>;
#declare L3ModelBBoxCenter = (L3ModelBBoxMin+L3ModelBBoxMax)/2; // <0,-14,0>
#declare L3ModelBBoxSize = L3ModelBBoxMax-L3ModelBBoxMin; // <40,28,40>
#declare L3FloorY = L3ModelBBoxMax.y;

//// Camera
// L3P's automatic camera positioning was based on the following:
// L3Latitude=30
// L3Longitude=45
// L3Radius=84.5506
// L3PercentageBack=0
// L3ViewingAngle=45
// L3RollAngle=0
// L3AspectRatio=4/3
// If changed below, objects may no longer fit into the view.
camera {
	#declare L3PercentageBack = 50; // Percentage of radius
	#declare L3Orthographic = 0; // Set to 1 for orthographic view
	#declare L3ViewingAngle = 45; // degrees
	#declare L3RollAngle = 0; // degrees
	#declare L3AspectRatio = 4/3;
	#declare L3Sky = -y;
	#declare L3StereoAngle = 5; // degrees
	//5 degrees corresponds to a distance between eyes (stereo cameras)
	//of 1/12 of distance to model.
	#declare L3StereoView = 0; // Normal view
	//Uncomment either two lines below to make stereo images:
	//#declare L3StereoView = -L3StereoAngle/2; // Left view
	//#declare L3StereoView =  L3StereoAngle/2; // Right view

	#if (version >= 3.5)
		#if (abs(L3AspectRatio-image_width/image_height) > 0.01)
			#error "L3AspectRatio does not match image size. Select a correct image size or use option -car<ar>."
		#end
	#end

	sky      L3Sky
	right    -L3AspectRatio*x
	#if (L3Orthographic)

		#error "* * doesn't work yet..."

		orthographic
		#declare L3LookAt = <0,-14,0>; // BBox center (not -cla)
		#declare L3OrthoScale = (1+L3PercentageBack/100.0)*52.533;
		#declare L3Location = L3LookAt - 2000*<-0.612372,0.5,0.612372>;
		location L3Location
		scale    L3OrthoScale
	#else
		#declare L3LookAt = <1.92156,-9.29318,-1.92154>; // Calculated (not -cla)
		#declare L3Location = <53.698,-51.5685,-53.698>;
		#declare L3Location = L3Location + L3PercentageBack/100.0*(L3Location-L3LookAt);
		//#if (L3StereoView)
		//	#declare L3Location = L3LookAt + vaxis_rotate(L3Location-L3LookAt, <-0.353553,-0.866025,0.353553>, L3StereoView);
		//#end
		angle    L3ViewingAngle
		location L3Location
	#end
	look_at  L3LookAt
	rotate   <0,1e-5,0> // Prevent gap between adjacent quads

#declare Closer = L3LookAt+0.1*(L3Location-L3LookAt);

	translate -L3Location
	#declare vx=vaxis_rotate(x,L3LookAt-L3Location,L3RollAngle);
	#declare vy=vaxis_rotate(y,L3LookAt-L3Location,L3RollAngle);
	#declare vz=vaxis_rotate(z,L3LookAt-L3Location,L3RollAngle);
	matrix <vx.x,vx.y,vx.z, vy.x,vy.y,vy.z, vz.x,vz.y,vz.z, 0,0,0>
	translate L3Location

#if (L3StereoView)
	translate -L3Location
	#declare Ver=<-0.353553,-0.866025,0.353553>;
	#declare vx=vaxis_rotate(x,Ver,L3StereoView);
	#declare vy=vaxis_rotate(y,Ver,L3StereoView);
	#declare vz=vaxis_rotate(z,Ver,L3StereoView);
	matrix <vx.x,vx.y,vx.z, vy.x,vy.y,vy.z, vz.x,vz.y,vz.z, 0,0,0>
	#declare L3Location = L3LookAt + vaxis_rotate(L3Location-L3LookAt, Ver, L3StereoView);
	translate L3Location
#end


//////////////////////////////////////////////////
// What about L3RollAngle... before/after stereo ?
//////////////////////////////////////////////////

	//Rotate model around its center:
	//translate -L3ModelBBoxCenter
	//rotate    <0,360*clock,0>
	//translate L3ModelBBoxCenter
}
/*
//// Lights
light_source {
	<0,-73.7863,-59.7863>  // Latitude,Longitude,Radius: 45,0,84.5506
	color rgb <1,1,1>
}
light_source {
	<63.4129,-56.2753,36.6115>  // Latitude,Longitude,Radius: 30,120,84.5506
	color rgb <1,1,1>
}
light_source {
	<-36.6115,-87.2229,21.1376>  // Latitude,Longitude,Radius: 60,-120,84.5506
	color rgb <1,1,1>
}
*/
//// ModelObject slope_test.ldr
object { slope__test_dot_ldr }



//// Statistics
//               PARTS             P         Total
// DAT files:        1             0             8
// POV Equivs:       -             0 (0%)
// LGEO:             1 (100%)      0 (0%)
// AR:               0 (0%)        0 (0%)
// Model has 1 parts (3 studs)
// WARNING: s\3039s01.dat not written to POV file
// WARNING: stud4a.dat not written to POV file
// WARNING: 2-4edge.dat not written to POV file
// WARNING: 1-4cyls.dat not written to POV file
// WARNING: 2-4cyli.dat not written to POV file
// WARNING: stud.dat not written to POV file

//// End
